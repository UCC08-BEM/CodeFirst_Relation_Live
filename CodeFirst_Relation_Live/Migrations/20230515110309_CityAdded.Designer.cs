// <auto-generated />
using CodeFirst_Relation_Live.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CodeFirst_Relation_Live.Migrations
{
    [DbContext(typeof(CFRelationContext))]
    [Migration("20230515110309_CityAdded")]
    partial class CityAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"), 1L, 1);

                    b.Property<int>("CityName")
                        .HasColumnType("int");

                    b.HasKey("CityID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.Department", b =>
                {
                    b.Property<int>("DepartmanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmanID"), 1L, 1);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmanID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"), 1L, 1);

                    b.Property<int>("PersonelsPersonelID")
                        .HasColumnType("int");

                    b.Property<int>("ProductsProductID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("PersonelsPersonelID");

                    b.HasIndex("ProductsProductID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.Personel", b =>
                {
                    b.Property<int>("PersonelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonelID"), 1L, 1);

                    b.Property<int>("CitiesCityID")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentsDepartmanID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonelID");

                    b.HasIndex("CitiesCityID");

                    b.HasIndex("DepartmentsDepartmanID");

                    b.ToTable("Personels");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"), 1L, 1);

                    b.Property<int>("CategoriesCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoriesCategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.Order", b =>
                {
                    b.HasOne("CodeFirst_Relation_Live.Models.Personel", "Personels")
                        .WithMany("Orders")
                        .HasForeignKey("PersonelsPersonelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeFirst_Relation_Live.Models.Product", "Products")
                        .WithMany("Orders")
                        .HasForeignKey("ProductsProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personels");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.Personel", b =>
                {
                    b.HasOne("CodeFirst_Relation_Live.Models.City", "Cities")
                        .WithMany("Personels")
                        .HasForeignKey("CitiesCityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeFirst_Relation_Live.Models.Department", "Departments")
                        .WithMany("Personels")
                        .HasForeignKey("DepartmentsDepartmanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cities");

                    b.Navigation("Departments");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.Product", b =>
                {
                    b.HasOne("CodeFirst_Relation_Live.Models.Category", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoriesCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.City", b =>
                {
                    b.Navigation("Personels");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.Department", b =>
                {
                    b.Navigation("Personels");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.Personel", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("CodeFirst_Relation_Live.Models.Product", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
